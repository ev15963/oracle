set serveroutput on
begin
  DBMS_OUTPUT.PUT_LINE('Hello PL/SQL');
end;
/

DECLARE
  VEMPNO NUMBER(4);
  VENAME VARCHAR2(10);
BEGIN
  VEMPNO := 7999;
  VENAME := 'STEVE';   
  DBMS_OUTPUT.PUT_LINE('   사원번호  이름'); 
  DBMS_OUTPUT.PUT_LINE('  ---------------');
  DBMS_OUTPUT.PUT_LINE('   ' || VEMPNO || '     ' || VENAME); 
END;
/

DECLARE
  VEMPNO EMP.EMPNO%TYPE;
  VENAME EMP.ENAME%TYPE;
BEGIN
  SELECT EMPNO, ENAME INTO VEMPNO, VENAME
  FROM EMP
  WHERE ENAME='MILLER';
  DBMS_OUTPUT.PUT_LINE('   사원번호    이름'); 
  DBMS_OUTPUT.PUT_LINE('  ---------------');
  DBMS_OUTPUT.PUT_LINE('   ' || VEMPNO || '   ' || VENAME); 
END;
/

DECLARE
   VEMPNO 	 EMP.EMPNO%TYPE;
   VENAME 	 EMP.ENAME%TYPE;
   VDEPTNO   EMP.DEPTNO%TYPE;
   VDNAME 	 VARCHAR2(20) := NULL;
BEGIN
   SELECT EMPNO, ENAME, DEPTNO 
   INTO VEMPNO, VENAME, VDEPTNO 
   FROM  EMP
   WHERE EMPNO=7902;
 IF (VDEPTNO = 10)  THEN
      VDNAME := 'ACCOUNTING';
   END IF;
   IF (VDEPTNO = 20)  THEN
     VDNAME := 'RESEARCH';
   END IF;
   IF (VDEPTNO = 30)  THEN
      VDNAME := 'SALES';
   END IF;
   IF (VDEPTNO = 40) THEN  
      VDNAME := 'OPERATIONS';
   END IF;

   DBMS_OUTPUT.PUT_LINE('   사번     이름      부서명');
   DBMS_OUTPUT.PUT_LINE('  ---------------------------');
   DBMS_OUTPUT.PUT_LINE('   ' || VEMPNO||'    '
                ||VENAME||'    '||VDNAME);
END;
/

DECLARE
  VEMP EMP%ROWTYPE;
  ANNSAL NUMBER(7,2);
BEGIN    
  SELECT * INTO VEMP
  FROM EMP
  WHERE ENAME='MILLER';
IF (VEMP.COMM IS NULL) THEN 
    ANNSAL:=VEMP.SAL*12;       
  ELSE     
    ANNSAL:=VEMP.SAL*12+VEMP.COMM; 
  END IF;

  DBMS_OUTPUT.PUT_LINE('  사번    이름    연봉'); 
  DBMS_OUTPUT.PUT_LINE('--------------------------');
  DBMS_OUTPUT.PUT_LINE('  '||VEMP.EMPNO||'   '
         ||VEMP.ENAME||'   '||ANNSAL); 
END;
/  

DECLARE
  VEMP EMP%ROWTYPE;
  VDNAME VARCHAR2(14);
BEGIN  
  SELECT * INTO VEMP
  FROM EMP
  WHERE ENAME='MILLER';
IF (VEMP.DEPTNO = 10)  THEN
    VDNAME := 'ACCOUNTING';
  ELSIF (VEMP.DEPTNO = 20)  THEN
    VDNAME := 'RESEARCH';
  ELSIF (VEMP.DEPTNO = 30)  THEN
    VDNAME := 'SALES';
  ELSIF (VEMP.DEPTNO = 40) THEN  
    VDNAME := 'OPERATIONS';
  END IF;

  DBMS_OUTPUT.PUT_LINE('  사번    이름     부서명'); 
  DBMS_OUTPUT.PUT_LINE('------------------------------');

  DBMS_OUTPUT.PUT_LINE('  '||VEMP.EMPNO
        ||'    '||VEMP.ENAME||'   '||VDNAME); 
END;
/

DECLARE
  N  NUMBER := 1;
BEGIN
  LOOP
    DBMS_OUTPUT.PUT_LINE(N);
    N := N + 1;
    IF N > 5 THEN
      EXIT;
    END IF;
  END LOOP;
END;
/

DECLARE
BEGIN
  FOR N IN 1..5 LOOP
    DBMS_OUTPUT.PUT_LINE( N );
  END LOOP;
END;
/

DECLARE
  N NUMBER := 1;
BEGIN
  WHILE N <= 5 LOOP
    DBMS_OUTPUT.PUT_LINE( N );
    N := N + 1;
  END LOOP;
END;
/

drop table emp01;

create table emp01
as
select * from emp;

CREATE OR REPLACE PROCEDURE DEL_ALL
IS
BEGIN
DELETE FROM EMP01;
END;
/ 

BEGIN
  DEL_ALL();
END;     

SELECT *
FROM EMP01;

CREATE OR REPLACE PROCEDURE 
DEL_ENAME(VENAME EMP01.ENAME%TYPE)
IS
BEGIN
DELETE FROM EMP01 WHERE ENAME=VENAME;
END;
/

BEGIN
  DEL_ENAME('SMITH');
END; 

CREATE OR REPLACE PROCEDURE SEL_EMPNO
( VEMPNO IN 	EMP.EMPNO%TYPE,
  VENAME OUT EMP.ENAME%TYPE,
  VSAL OUT EMP.SAL%TYPE,
  VJOB OUT EMP.JOB%TYPE
)
IS
BEGIN
  SELECT ENAME, SAL, JOB INTO VENAME, VSAL, VJOB
  FROM EMP
  WHERE EMPNO=VEMPNO;
END;
/

VARIABLE VAR_ENAME VARCHAR2(15);
VARIABLE VAR_SAL NUMBER;
VARIABLE VAR_JOB VARCHAR2(9);

BEGIN
  SEL_EMPNO(7902, :VAR_ENAME, :VAR_SAL, :VAR_JOB);
END; 

PRINT VAR_ENAME 
PRINT VAR_SAL  
PRINT VAR_JOB


CREATE OR REPLACE PROCEDURE INSERT_EMP_PROC
( VEMPNO IN 	EMP.EMPNO%TYPE,
  VENAME IN EMP.ENAME%TYPE,
  VSAL IN EMP.SAL%TYPE,
  VDEPTNO IN EMP.DEPTNO%TYPE
)
IS
BEGIN
 INSERT INTO EMP(empno, ename, sal, deptno)
 VALUES(VEMPNO, VENAME, VSAL, VDEPTNO);
END;
/

BEGIN
	INSERT_EMP_PROC(9000, 'JOBS', 9000, 10);
END;

SELECT *
FROM EMP;

CREATE OR REPLACE PROCEDURE UPDATE_EMP_PROC
(VEMPNO IN EMP.EMPNO%TYPE,
  VSAL IN EMP.SAL%TYPE)
IS
BEGIN
 UPDATE EMP
 SET SAL = VSAL
 WHERE EMPNO = VEMPNO;
END;
/

BEGIN
	UPDATE_EMP_PROC(9000,10000);
END;

SELECT *
FROM EMP;

drop table emp01;

create table emp01(
empno number(4) primary key,
ename varchar2(10) not null,
job varchar2(20));

CREATE TABLE SAL01(
SALNO NUMBER(4) PRIMARY KEY,
SAL NUMBER(7,2),
EMPNO NUMBER(4) REFERENCES EMP01(EMPNO)
);

CREATE SEQUENCE SAL01_SALNO_SEQ; 

CREATE OR REPLACE TRIGGER TRG_01
AFTER INSERT 
ON EMP01
FOR EACH ROW
BEGIN 
INSERT INTO SAL01 VALUES(
SAL01_SALNO_SEQ.NEXTVAL, 100, :NEW.EMPNO); 
END;
/

INSERT INTO EMP01 VALUES(1, '박문석', '프로그래머');

SELECT * FROM EMP01;

SELECT * FROM SAL01;

CREATE OR REPLACE TRIGGER TRG_02
AFTER DELETE ON EMP01
FOR EACH ROW
BEGIN
DELETE FROM SAL01 WHERE EMPNO=:old.EMPNO;
END;
/

DELETE FROM EMP01 WHERE EMPNO=1;

SELECT * FROM EMP01;

SELECT * FROM SAL01;

DROP TRIGGER TRG_01;

DROP TRIGGER TRG_02;

CREATE OR REPLACE TRIGGER emp_sal_chk
BEFORE UPDATE OF sal ON emp
FOR EACH ROW WHEN (NEW.sal < OLD.sal 
		OR NEW.sal > OLD.sal * 1.1)
BEGIN
	raise_application_error(-20502,
	   'May not decrease salary. Increase must be < 10%');
END;
/

CREATE OR REPLACE TRIGGER emp_resource
	BEFORE insert OR update OR delete ON emp
BEGIN
	IF TO_CHAR(SYSDATE,'DY') IN ('SAT','SUN')
		OR TO_NUMBER(TO_CHAR(SYSDATE,'HH24'))
			NOT BETWEEN 9 AND 18 THEN
		raise_application_error(-20502,
		   '작업할 수 없는 시간 입니다.');
	END IF;
END;
/

DROP TABLE EMP_SAL_TOT;

CREATE TABLE EMP_SAL_TOT AS
  SELECT DEPTNO, SUM(SAL) SAL_TOT
  FROM EMP
  GROUP BY DEPTNO;
 
 
CREATE OR REPLACE TRIGGER EMP_TOT
	AFTER INSERT OR UPDATE OR DELETE ON EMP
	FOR EACH ROW
BEGIN
		IF INSERTING THEN
			UPDATE EMP_SAL_TOT 
			SET SAL_TOT = SAL_TOT + :NEW.SAL
			WHERE DEPTNO = :NEW.DEPTNO;
		END IF;
		IF UPDATING THEN 
			UPDATE EMP_SAL_TOT 
			SET SAL_TOT = SAL_TOT + :NEW.SAL - :OLD.SAL
			WHERE DEPTNO = :NEW.DEPTNO;
		END IF;
		IF DELETING THEN 
			UPDATE EMP_SAL_TOT 
			SET SAL_TOT = SAL_TOT - :OLD.SAL
			WHERE DEPTNO = :OLD.DEPTNO;
		END IF;
END;
/ 

SELECT *
FROM EMP_SAL_TOT;

INSERT INTO EMP(EMPNO, ENAME, SAL, DEPTNO)
VALUES(8000, 'TAMES', 2000, 10);

SELECT *
FROM EMP_SAL_TOT;

UPDATE EMP
SET SAL = 4000
WHERE EMPNO = 8000;

SELECT *
FROM EMP_SAL_TOT;

DELETE FROM EMP
WHERE EMPNO = 8000;

SELECT *
FROM EMP_SAL_TOT;